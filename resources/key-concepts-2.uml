@startuml
skinparam TitleFontSize 24
skinparam TitleFontStyle Bold
Title (m/decode [:uuid] "facf2030-2dd0-4155-b22b-6a49f7a38e9a" json-transformer)

database "Global Schema Registry\nmalli.registry" {
  folder "Lookup table" {
    [{:uuid : #IntoSchema{:type :uuid},\n  uuid? : #IntoSchema{:type :uuid}}] as LT
  }
}

package "Step 1: Inputs" {
  [:uuid]
  ["facf2030-2dd0-4155-b22b-6a49f7a38e9a"]
  [json-transformer]
}

node "Step 2: Create JSON Decoder" {
  rectangle "Step 2a: Find corresponding malli.core/Schema" {
    [:uuid] --> [malli.core/Schema]
  }
  rectangle "Step 2b: Assemble Transformer"{
    [json-transformer] --> [malli.core/Transformer]
  }

  node "Step 2c: Combine Transformer and Schema\nto create transform-fn" {
    [malli.core/Schema] --> [{:enter fn, :leave fn :as interceptor-map}]
    [malli.core/Transformer] --> [{:enter fn, :leave fn :as interceptor-map}]
    [{:enter fn, :leave fn :as interceptor-map}] --> [transform-fn] : compose interceptors into fn
  }
}

DB -right-> [malli.core/Transformer] : Use predefined codecs

[malli.core/Schema] -right-> LT : Lookup `:uuid` schema in Registry
LT --> [malli.core/Schema]

database "Predefined codecs\nmalli.transform" as DB {
  folder "JSON Encoders" {
    [{:uuid : uuid->str,\n  uuid? : uuid->str}] as Jenc
  }

  folder "JSON Decoders" {
    [{:uuid : parse-uuid,\n  uuid? : parse-uuid}] as Jdec
  }
}


rectangle "Step 3: Decode string to UUID" {
  [transform-fn] --> [ #uuid "facf2030-2dd0-4155-b22b-6a49f7a38e9a"]
  ["facf2030-2dd0-4155-b22b-6a49f7a38e9a"] --> [ #uuid "facf2030-2dd0-4155-b22b-6a49f7a38e9a"]
}

@enduml
