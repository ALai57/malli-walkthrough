@startuml
skinparam TitleFontSize 24
skinparam TitleFontStyle Bold
Title Following data structures during a Malli decode\n(m/decode [:uuid] "facf2030-2dd0-4155-b22b-6a49f7a38e9a" (json-transformer))\n

database "Global Schema Registry\nmalli.registry" {
  folder "Lookup table" {
    [{:uuid : #IntoSchema{:type :uuid},\n  uuid? : #IntoSchema{:type :uuid}\n ...}] as LT
  }
}

package "Step 1: Inputs" {
  [:uuid]
  [ "facf2030-2dd0-4155-b22b-6a49f7a38e9a"]
  [ (json-transformer)]
}

node "Step 2: Create JSON Decoder" {
  rectangle "Step 2a: Find corresponding malli.core/Schema" {
    [:uuid] --> [malli.core/Schema]
  }
  rectangle "Step 2b: Assemble Transformer"{
    [ (json-transformer)] --> [malli.core/Transformer] : Eval (json-transformer)
  }

  node "Step 2c: Create transform-fn by calling m/-transformer method\n on UUID malli.core/Schema with json-transformer" {
    [malli.core/Schema] --> [{:enter fn, :leave fn :as interceptor-map}]
    [malli.core/Transformer] --> [{:enter fn, :leave fn :as interceptor-map}]
    [{:enter fn, :leave fn :as interceptor-map}] --> [transform-fn] : compose interceptor into transform-fn
  }
}

DB -right-> [malli.core/Transformer] : Use predefined codecs

[malli.core/Schema] -right-> LT : Lookup `:uuid` schema in Registry
LT --> [malli.core/Schema]

database "Predefined codecs\nmalli.transform :as mt" as DB {
  folder "mt/-json-encoders" {
    [{:uuid : -any->str,\n  uuid? : -any->str\n ...}] as Jenc
  }

  folder "mt/-json-decoders" {
    [{:uuid : -string->uuid,\n  uuid? : -string->uuid\n ...}] as Jdec
  }
}


rectangle "Step 3: Decode string to UUID" {
  [transform-fn] --> [ #uuid "facf2030-2dd0-4155-b22b-6a49f7a38e9a"]
  [ "facf2030-2dd0-4155-b22b-6a49f7a38e9a"] --> [ #uuid "facf2030-2dd0-4155-b22b-6a49f7a38e9a"]
}

@enduml
